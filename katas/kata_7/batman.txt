#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
int main()
{
    int W; // width of the building.
    int H; // height of the building.
    scanf("%d%d", &W, &H);
    int N; // maximum number of turns before game over.
    scanf("%d", &N);
    int X0;
    int Y0;
    scanf("%d%d", &X0, &Y0);

    // game loop
    while (1) {
        char bombDir[4]; // the direction of the bombs from batman's current location (U, UR, R, DR, D, DL, L or UL)
        scanf("%s", bombDir);
        int dirx = 0;
        int diry = 0;
        int nuevox = W;
        int nuevox2 = 0;
        int nuevoy = H;
        int nuevoy2 = 0;
        int bandera = 1;
        //printf("%d %d ",W, H);
        
        if(strcmp(bombDir,"U") == 0){
           diry = ((H-1)-((H-1)-Y0))/7;
            if(diry<1){
                if((H-1)-Y0!=0){
                    diry = 1;
                }   
            }

            printf("%d %d\n",X0,(Y0 - diry));
            Y0 = (Y0 - diry);
            nuevoy = Y0;
        }
        if(strcmp(bombDir,"UR") == 0){
            dirx = (((W-1)-X0)/7);
            diry = ((H-1)-((H-1)-Y0))/7;
            if(dirx<1){
                if((W-1)-X0!=0){
                    dirx = 1;
                }                
            }
            if(diry<1){
                if((H-1)-Y0!=0){
                    diry = 1;
                }   
            }
            printf("%d %d\n",(X0 + dirx),(Y0 - diry));
            X0 = (X0 + dirx);
            Y0 = (Y0 - diry);
            nuevox = X0;
            nuevoy = Y0;
            
        }
        if(strcmp(bombDir,"R") == 0){
            dirx = (((W-1)-X0)/7);
            if(dirx<1){
                if((W-1)-X0!=0){
                    dirx = 1;
                }                
            }

            printf("%d %d\n",(X0+dirx),Y0);
            X0 = (X0 + dirx);
            nuevox = X0;
        }      

        if(strcmp(bombDir,"DR") == 0){
            dirx = (((W-1)-X0)/7);
            diry = (((H-1)-Y0)/7);
            if(dirx<1){
                if((W-1)-X0!=0){
                    dirx = 1;
                }                
            }
            if(diry<1){
                if((H-1)-Y0!=0){
                    diry = 1;
                }   
            }
            printf("%d %d\n",(X0 + dirx),(Y0 + diry));
            X0 = (X0 + dirx);
            Y0 = (Y0 + diry);
            nuevox = X0;
            nuevoy = Y0;
        }
        if(strcmp(bombDir,"D") == 0){
            diry = (((H-1)-Y0)/7);
            if(diry<1){
                if((H-1)-Y0!=0){
                    diry = 1;
                }   
            }

            printf("%d %d\n",X0,(Y0 + diry));
            Y0 = (Y0 + diry);
            nuevoy2 = Y0;
        }
        if(strcmp(bombDir,"DL") == 0){
            dirx = ((W-1)-((W-1)-X0))/7;
            diry = (((H-1)-Y0)/7);
            if(dirx<1){
                if((W-1)-X0!=0){
                    dirx = 1;
                }                
            }
            if(diry<1){
                if((H-1)-Y0!=0){
                    diry = 1;
                }   
            }
            printf("%d %d\n",(X0 + dirx),(Y0 - diry));
            X0 = (X0 + dirx);
            Y0 = (Y0 - diry);
            nuevox = X0;
            nuevoy = Y0;
        }
        if(strcmp(bombDir,"L") == 0){
            dirx = ((W-1)-((W-1)-X0))/7;
            if(dirx<1){
                if((W-1)-X0!=0){
                    dirx = 1;
                }                
            }

            printf("%d %d\n",(X0-dirx),Y0);
            X0 = (X0 - dirx);
            nuevox = X0;
        }
        if(strcmp(bombDir,"UL") == 0){
            dirx = ((W-1)-((W-1)-X0))/7;
            diry = ((H-1)-((H-1)-Y0))/7;
            if(dirx<1){
                if((W-1)-X0!=0){
                    dirx = 1;
                }                
            }
            if(diry<1){
                if((H-1)-Y0!=0){
                    diry = 1;
                }   
            }
            printf("%d %d\n",(X0 - dirx),(Y0 - diry));
            X0 = (X0 - dirx);
            Y0 = (Y0 - diry);
            nuevox = X0;
            nuevoy = Y0;
        }

                
    }

    return 0;
}